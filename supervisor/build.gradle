plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
}

ext.versionVariant = null // for example : nestle
// VersionReplaceStartTag
ext.versionMajor = 3
ext.versionMinor = 0
ext.versionPatch = 1
ext.versionBuild = 19
// VersionReplaceEndTag
ext.versionType = null // stable(null), beta, snapshot, ...

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.varanegar.supervisor"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode generateVersionCode()
        versionName generateVersionName()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    signingConfigs {
        release {
            keyAlias 'supervisor'
            keyPassword '2tDCjCYf=a5gsYF^'
            storeFile file('./keystore.jks')
            storePassword 'Z7tSLN=8Agnwgjzy'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            lintOptions {
                disable 'MissingTranslation'
                abortOnError false
            }
        }
    }

    applicationVariants.all { variant ->
        if (variant.buildType.name == "release") {
            variant.outputs.each { output ->
                // For each separate APK per architecture, set a unique version code as described here:
                // https://developer.android.com/studio/build/configure-apk-splits.html

                def formattedDate = new Date().format('yyMMdd')
                def fileName = defaultConfig.applicationId.replaceAll('com.', '') + "_V" + defaultConfig.versionName + "_" + formattedDate + ".apk"
                println '*******************'
                println 'Apk file name :'
                println fileName
                output.outputFileName = fileName
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
  

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation project(path: ':vaslibrary')
    implementation project(path: ':framework')
    implementation project(path: ':vpnLib')
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    annotationProcessor project(':processor')
    implementation 'com.github.bmelnychuk:atv:1.2.+'



    // Firebase Cloud Messaging (Java)Firebase dependencies
    implementation platform('com.google.firebase:firebase-bom:29.1.0')
    implementation 'com.google.firebase:firebase-analytics'
//    implementation 'com.google.firebase:firebase-messaging'
//    implementation 'com.google.firebase:firebase-analytics'
//    implementation 'com.google.firebase:firebase-core:16.0.8'
//    implementation 'com.google.firebase:firebase-auth:16.0.1'
//    implementation 'com.firebaseui:firebase-ui-auth:2.1.0'
//    implementation 'com.google.firebase:firebase-firestore:18.1.0'

    implementation 'androidx.work:work-runtime:2.5.0'
    implementation 'com.github.bumptech.glide:glide:4.13.0'



}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleRelease') {
        task.doLast {
            commitRelease()
        }
    }
}


private Integer generateVersionCode() {
    return ext.versionMajor * 10000000 + ext.versionMinor * 100000 + ext.versionPatch * 1000 + ext.versionBuild
}

private String generateVersionName() {
    String versionName = "${ext.versionMajor}.${ext.versionMinor}.${ext.versionPatch}.${ext.versionBuild}"
    if (ext.versionType != null && ext.versionType != "") {
        versionName += "-" + ext.versionType
    }
    if (ext.versionVariant != null) {
        versionName += "-" + ext.versionVariant
    }
    return versionName;
}

//committagreplace1
private void commitRelease() {
    println("assmble relase finished. we check version type. if version type was empty or null then we commit.")
    if (ext.versionType == null || ext.versionType.isEmpty()) {
        def version = "release/Supervisor-" + generateVersionName()
        if(ext.versionVariant != null)
            version = "-" + ext.versionVariant
        try {
            try {
                runCommands("git", "add", ".")
                runCommands("git", "commit", "-m", version)
                runCommands("git", "tag", "-a", "Supervisor-" + generateVersionName(), "-m", "${version}")
                runCommands("git", "push", "origin", "--tags")
                runCommands("git", "push", "origin")
            } catch (Exception e) {
                println(e.message)
            }
            runCommands("git", "tag", "-a", "Supervisor-" + generateVersionName(), "-m", "${version}")
            runCommands("git", "push", "origin", "--tags")
            runCommands("git", "push", "origin")
        } catch (Exception e) {
            println(e.message)
        }
        runCommands("git", "status")
    }
}
//committagreplace2

private static String runCommands(String... commands) {
    def process = new ProcessBuilder(commands).redirectErrorStream(true).start()
    process.waitFor()
    def result = ''
    process.inputStream.eachLine { result += it + '\n' }
    def errorResult = process.exitValue() == 0
    if (!errorResult) {
        throw new IllegalStateException(result)
    }
    return result
}